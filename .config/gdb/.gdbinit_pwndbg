source ~/.config/gdb/pwndbg/gdbinit.py
source ~/.config/gdb/Pwngdb/angelheap/gdbinit.py

# alias for angelheap
alias fbin=printfastbin
alias hip=heapinfo
alias tm=tracemalloc
alias pp=parseheap

# misc setting for pwndbg
alias offset=distance
alias vh=vis-heap-chunks
alias plk=probeleak
alias bv=breakrva
alias sr=stepret
alias sc=source
set print asm-demangle on
set show-flags on
set show-retaddr-reg on
set context-clear-screen on
set telescope-skip-repeating-val off

# customize color-theme
set banner-color cyan,bold
set context-register-changed-color red,bold
set context-register-color green
set disasm-branch-color yellow
set memory-data-color blue
set memory-heap-color purple,bold
set memory-rodata-color green
set memory-stack-color purple

# target remote localhost, arg0 = port
define trl
    target remote localhost:$arg0
end

# at
define at
if $argc <= 1
python
import subprocess as sp
import traceback
try:
    gdb.execute("attachp")
except Exception:
    traceback.print_exc()
end
if $argc == 1
   source $arg0
end

else
    help at
end
end
document at
Attach to latest pid of this file. Can also run gdbscript if provided
Usage: at [gdbscript] (optional)
end

# find
python
class Find(gdb.Command):
    def __init__(self):
        super (Find, self).__init__ ("find", gdb.COMMAND_USER)

    def invoke(self,args,from_tty):
        self.dont_repeat()
        self.do_find(args)

    def do_find(self, value):
        import string
        import codecs
        cmd = None
        if value.startswith("0x"):
            value = value[2:]
            if len(value) %2 != 0:
                value = "0" + value
            value = codecs.decode(value, 'hex')[::-1]
            value = codecs.encode(value, 'hex').decode('UTF-8')
            cmd = "search -x %s" % value
        else:
            cmd = "search -s %s" % value
        print(cmd)
        gdb.execute(cmd)
Find()
end
